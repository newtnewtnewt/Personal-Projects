#!/bin/bash
# Name: Noah Dunn
# Professor: Dr. Campbell
# Class: DevOPS + Cloud Computing
# Date: 11/7/2020
# Assignment: Load Balancer Automation
# Resources: My previous work, Dr. Campbell
# https://stackoverflow.com/questions/5171901/find-and-replace-in-file-and-overwrite-file-doesnt-work-it-empties-the-file

# Start all the worker processes for the load balancer
aws ec2 run-instances --image-id ami-0dba2cb6798deb6d8 --count $1 --instance-type t2.micro --key-name dunnnm2-public-key --security-group-ids childprocess > /dev/null 2>&1
# Wait a couple seconds to let all boxes initialize
totalseconds=$((10+10*$1))
printf "Spinning up servers\n"
printf "Wait $totalseconds seconds\n"
sleep "$totalseconds"s
# Get the IPs
printf "Public IPs for Ansible Balancees\n"
aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --output=text | sed -E 's/[[:space:]]+/\n/g'
# Get the Private IPs
printf "Private IPs for Ansible Balancees\n"
privIPs=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PrivateIpAddress" --output=text | sed -E 's/[[:space:]]+/\n/g')
echo "$privIPs"
publicIPs=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --output=text | sed -E 's/[[:space:]]+/\n/g'
)
curlIP="curl -ik \"https://external-dns.csi.miamioh.edu/ddns1.php?hkey=b6f97b62fec90dd7e3549c5b27a1d5ed&dnsname=dunnnm2.aws\""

# Dynamically Create the Script
echo "#!/bin/bash" > BoxInstallScript.bash
echo "apt-get update -y && apt-get install ansible -y" >> BoxInstallScript.bash
echo "apt-get install nginx -y" >> BoxInstallScript.bash
# Create the hosts on local
echo "[loadbalancees]" > hosts
echo "$publicIPs" >> hosts
# Register the DNS
echo "$curlIP" >> BoxInstallScript.bash
# Save a local copy of nginx.conf
echo "events {}" > nginx.conf
echo "http { " >>  nginx.conf
echo "	upstream children {" >> nginx.conf
for i in $privIPs
do
	echo "		server $i;" >> nginx.conf
done
echo "	}" >> nginx.conf
echo " " >> nginx.conf 
echo "	server { " >> nginx.conf 
echo "		listen 80;" >> nginx.conf
echo "          root /var/www/html;" >> nginx.conf
echo "          autoindex on;" >> nginx.conf
echo "		location / {" >> nginx.conf
echo "			proxy_pass http://children;" >> nginx.conf
echo "		}" >> nginx.conf
echo "	}" >> nginx.conf 
echo "}" >> nginx.conf
# Start the Load Balancer Instance
aws ec2 run-instances --image-id ami-0dba2cb6798deb6d8 --count 1 --instance-type t2.micro --key-name dunnnm2-public-key --security-group-ids default --user-data file://BoxInstallScript.bash > /dev/null 2>&1
# Print Load Balancer's Public IP
printf "Wait 5 seconds\n"
sleep 5s
printf "Public IP for Load Balancer:\n"
aws ec2 describe-instances --filter Name=instance.group-id,Values=sg-479c4f7a --query "Reservations[*].Instances[*].PublicIpAddress" --output=text | sed -E 's/[[:space:]]+/\n/g'
loadbalancerip=$(aws ec2 describe-instances --filter Name=instance.group-id,Values=sg-479c4f7a --query "Reservations[*].Instances[*].PublicIpAddress" --output=text | sed -E 's/[[:space:]]+/\n/g')
# Update hosts file with Load Balancer IP
echo " " >> hosts
echo "[loadbalancer]" >> hosts
echo "$loadbalancerip" >> hosts
# Add an id.txt to each server
echo "Sleep for 45 seconds to let the servers spin up and install"
sleep 45s
echo "Run ansible to configure loadbalancer and balancees"
ansible-playbook loadbalancernginx.yml -i hosts -u ubuntu
# Throw the IDs over
echo "Transport id.txt to each server"
num=1
for i in $publicIPs; do
        fulltag="${num} dunnnm2"
        ssh -o StrictHostKeyChecking=no ubuntu@${i} "sudo sh -c \"echo $fulltag >/var/www/html/id.txt\""
        num=$((num+1))
done
# Build the .gitlab-ci.yml file
echo "image: newtnewtnewt/dunnnm2finalprojectimage" > .gitlab-ci.yml
echo " " >> .gitlab-ci.yml
echo "workflow:" >> .gitlab-ci.yml
echo "   rules:" >> .gitlab-ci.yml
echo "         - if: \$CI_MERGE_REQUEST_ID" >> .gitlab-ci.yml
echo "         - if: \$CI_COMMIT_BRANCH == 'webprod'" >> .gitlab-ci.yml
echo " " >> .gitlab-ci.yml
echo "stages:" >> .gitlab-ci.yml
echo "         - deploy" >> .gitlab-ci.yml
echo " " >> .gitlab-ci.yml
echo "distribute_html:" >> .gitlab-ci.yml
echo "          tags:" >> .gitlab-ci.yml
echo "                  - aws-tag" >> .gitlab-ci.yml
echo "          stage: deploy" >> .gitlab-ci.yml
echo "          script:" >> .gitlab-ci.yml
echo "                 - echo \"user=\${GITLAB_USER_LOGIN}\"" >> .gitlab-ci.yml
echo "                 - echo \"Configure SSH-AGENT\"" >> .gitlab-ci.yml
echo "                 - 'which ssh-agent || ( apt-get update -y && apt-get install  openssh-client -y )'" >> .gitlab-ci.yml
echo "                 - eval \$(ssh-agent -s)" >> .gitlab-ci.yml
echo "                 - ssh-add <(echo "\"\$SSH_PRIVATE_KEY\"")" >> .gitlab-ci.yml
echo "                 - mkdir -p ~/.ssh" >> .gitlab-ci.yml
echo "                 - '[[ -f /.dockerenv ]] && echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" > ~/.ssh/config'" >> .gitlab-ci.yml
echo "                 - cp /GenerateIndexFile ." >> .gitlab-ci.yml
echo "                 - ./GenerateIndexFile" >> .gitlab-ci.yml
for i in $publicIPs; do
        echo "                 - scp -r * ubuntu@$i:/var/www/html" >> .gitlab-ci.yml
done
htmlrootsfiles=$(ls .. | grep \.html)
for j in $htmlrootsfiles; do
        echo "                 - tidy \"$j\"" >> .gitlab-ci.yml
done
echo "                 - tidy \"index.html\"" >> .gitlab-ci.yml
cp .gitlab-ci.yml ..
