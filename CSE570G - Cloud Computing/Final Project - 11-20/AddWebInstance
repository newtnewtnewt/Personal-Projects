#!/bin/bash
# Spin up a new box
echo "Spinning up the new box"
aws ec2 run-instances --image-id ami-0dba2cb6798deb6d8 --count 1 --instance-type t2.micro --key-name dunnnm2-public-key --security-group-ids childprocess > /dev/null 2>&1
echo "Waiting 30 seconds for load"
sleep 30s
# Grab the needed values
balanceespublicIPs=$(aws ec2 describe-instances --filter Name=instance.group-id,Values=sg-015a1e18e5c69bdd1 --query "Reservations[*].Instances[*].PublicIpAddress" --output=text | sed -E 's/[[:space:]]+/\n/g'
)
balanceesprivateIPs=$(aws ec2 describe-instances --filter Name=instance.group-id,Values=sg-015a1e18e5c69bdd1 --query "Reservations[*].Instances[*].PrivateIpAddress" --output=text | sed -E 's/[[:space:]]+/\n/g'
)
balancerpublicIP=$(aws ec2 describe-instances --filter Name=instance.group-id,Values=sg-479c4f7a --query "Reservations[*].Instances[*].PublicIpAddress" --output=text | sed -E 's/[[:space:]]+/\n/g'
)
echo "Reconstruct Hosts File"
# Reconstruct Hosts File
echo "[loadbalancees]" > hosts
echo "$balanceespublicIPs" >> hosts
echo " " >> hosts
echo "[loadbalancer]" >> hosts
echo "$balancerpublicIP" >> hosts
# Reconstruct nginx.conf
echo "Reconstructing nginx.conf"
echo "events {}" > nginx.conf
echo "http { " >>  nginx.conf
echo "	upstream children {" >> nginx.conf
for i in $balanceesprivateIPs
do
	echo "		server $i;" >> nginx.conf
done
echo "	}" >> nginx.conf
echo " " >> nginx.conf 
echo "	server { " >> nginx.conf 
echo "		listen 80;" >> nginx.conf
echo "          root /var/www/html;" >> nginx.conf
echo "          autoindex on;" >> nginx.conf
echo "		location / {" >> nginx.conf
echo "			proxy_pass http://children;" >> nginx.conf
echo "		}" >> nginx.conf
echo "	}" >> nginx.conf 
echo "}" >> nginx.conf

# Reconstruct the .gitlab-ci.yml file 
echo "Reconstructing .gitlab-ci.yml"
echo "image: ubuntu:20.04" > .gitlab-ci.yml
echo " " >> .gitlab-ci.yml
echo "workflow:" >> .gitlab-ci.yml
echo "   rules:" >> .gitlab-ci.yml
echo "         - if: \$CI_MERGE_REQUEST_ID" >> .gitlab-ci.yml
echo "         - if: \$CI_COMMIT_BRANCH == 'webprod'" >> .gitlab-ci.yml
echo " " >> .gitlab-ci.yml
echo "stages:" >> .gitlab-ci.yml
echo "         - deploy" >> .gitlab-ci.yml
echo " " >> .gitlab-ci.yml
echo "before_script:" >> .gitlab-ci.yml
echo "         - apt-get update" >> .gitlab-ci.yml
echo "         - apt-get -y install sshpass" >> .gitlab-ci.yml
echo "distribute_html:" >> .gitlab-ci.yml
echo "           tags:" >> .gitlab-ci.yml
echo "                  - aws-tag" >> .gitlab-ci.yml
echo "           stage: deploy" >> .gitlab-ci.yml
echo "           script:" >> .gitlab-ci.yml
echo "                 - echo \"user=\${GITLAB_USER_LOGIN}\"" >> .gitlab-ci.yml
echo "                 - echo \"Configure SSH-AGENT\"" >> .gitlab-ci.yml
echo "                 - 'which ssh-agent || ( apt-get update -y && apt-get install  openssh-client -y )'" >> .gitlab-ci.yml
echo "                 - eval \$(ssh-agent -s)" >> .gitlab-ci.yml
echo "                 - ssh-add <(echo "\"\$SSH_PRIVATE_KEY\"")" >> .gitlab-ci.yml
echo "                 - mkdir -p ~/.ssh" >> .gitlab-ci.yml
echo "                 - '[[ -f /.dockerenv ]] && echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" > ~/.ssh/config'" >> .gitlab-ci.yml
# Add the scp statements to the .gitlab yml file
for i in $balanceespublicIPs; do
        echo "                 - scp -r * ubuntu@$i:/var/www/html" >> .gitlab-ci.yml
done 
cp .gitlab-ci.yml ../
# Wait until box is set up to run ansible
echo "Sleeping for 60s"
sleep 60s
ansible-playbook addbalancees.yml -i hosts -u ubuntu
# Add id.txt to each server
echo "Transport id.txt to each server"
num=1
for i in $balanceespublicIPs; do
        fulltag="${num} dunnnm2"
        ssh -o StrictHostKeyChecking=no ubuntu@${i} "sudo sh -c \"echo $fulltag >/var/www/html/id.txt\""
        num=$((num+1))
done

